 1. 취약점의 분류 
 
 익스플로잇 이란 사전적으로는 악용이라는 뜻을 가지고 있는 단어로, 취약점을 이용해 공격자가 의도한 동작을 수행하게 하는 코드 혹은 이를 이용한 공격 행위를 의미합니다.
 
 소프트웨어 버그는 보안에 영향을 미치는 정도에 따라 크게 4가지로 분류할 수 있습니다. 오른쪽 그림은 이렇게 나뉜 버그의 종류가 어떤 포함관계를 갖는지 간략히 나타낸 다이어그램입니다.이를 나누는 기준은 이 취약점이 공격자의 의도를 달성하는 데 어느 정도 도움을 주는지 이다.
 
 먼저 프로그래머가 의도하지 않은 동작을 수행하는 소프트웨어 버그가 가장 상위에 있습니다.
 그러한 소프트웨어 버그 중 보안에 영향을 미칠 수 있는 버그를 소프트웨어 취약점 이라 하고, 소프트웨어 취약점 중 이를 이용해 공격자가 의도한 동작을 수행할 수 있는 버그를 
 익스플로잇 가능한 취약점(Exploitable Vulnerabillity) 이라고 합니다. 그러나 익스플로잇이 가능하다고 해서 익스플로잇을 항상 안정적으로 성공할 수 있는 것은 아니다.
 보안 취약점에서 익그플로잇 확률은 위험성을 평사하는 중요한 요소 중 하나인데, 이는 익스플로잇 확률이 높을수록 무기화되어 사용하기 유용하고, 공격이 탐지될 확률이 줄어들기 때문이다. 
 이렇게 익스플로잇이 가능한 취약점 중 매우 높은 확률로 공격에 성공할 수 있는 버그를 안정적으로 익스플로잇 가능한 취약점 이라고 한다.
 
 2. 취약점의 종류 - 메모리 커럽션 취약점 
 
 취약점은 공격 방법에 따라 크게 두 가지로 나눌 수 있다. 
 C/C++ 과 같은 저수준 언어에서 메모리를 조작해 공격하는 메모리 커럽션 취약점과 메모리를 조작할 필요 없이 공격할 수 있는 로지컬 취약점 이다.
 먼저 메모리 커럽션 취약점의 대표적 예시들에 대해 간략히 알아보자 
 
 * BufferOverflow
 * Out-of-Boundary
 * Off-by-one
 * Format String Bug
 * Double Free / Use-After-Free
 * etc 
 
 * Buffer OverFlow
 
 BOF는 메모리 커럽션 취약점 중 가장 대표적인 취약점 이다.
 이는 프로그래머가 할당한 크기의 버퍼보다 더 큰 데이터를 입력받아 메모리의 다른 영역을 오염시킬 수 있는 취약점이다. 버퍼 오버플로우는 발표된 지 30년에 가까운 시간이 흘렀지만, 아직도 공격에 자주 사용되는 취약점 이다.
 
 * OUT-Of-Boundary
 
 OOB 취약점은 버퍼의 길이 범위를 벗어나는 곳에 데이터에 접근할 수 있는, 이 또한 버퍼 오버플로우와 마찬가지로 매우 취약점으로, 브라우저와 같은 대규모 최신 소프트웨어에서도 자주 발견되는 취약점 이다.
 
 * Off-by-One 
 
 Off-by-One은 경계 검사에서 하나 더 많은 값을 쓸 수 있을 때 발생하는 취약점이다. 가령 32 바이트 크기의 버퍼에서 인덱스 32로 접근하는 것 같은 경우이다. 이는 반복문을 순회할 ㄸ깨 잘못된 비교 연산자를 사용하거나 인덱스가 0부터 시작하는 것을 고려하지 못했을 때 자주 발생하는 취약점 이다.
 
 *Format String Bug
 
 FSB 는 printf 나 ssprintf와 같은 함수에서 포맷 스트링 문자열을 올바르게 사용하지 못해 발생하는 취약점이다. 포맷 스트링 역시 매우 강력한 취약점 이지만, 최신 컴파일러에서는 여러 가지 방법으로 이를 방어하고 있어 최근에는 잘 발생하지 않고 있다.
 
 *Double Free / Use-After-Free
 
 이 취약점은 동적 할당된 메모리를 정확히 관리하지 못했을 때 발생하는 취약점 이다. 이미 해페된 메모리를 다시 한번 해제하려고 시도하는 것을 Double Free, 해제된 메모리에 접근해 이를 사용하려고 하는 것을 use-after-free 라고 한다 .
 
 3 Attack Vector
 
 모든 소프트웨어 취약점은 소프트웨어와 공격자가 상호 작용하는 곳, 즉 사용자의 입력에서부터 발생한다. 이렇게 공격자가 소프트웨어와 상호 작용할 수 있는 곳을 Attack Vector(공격 벡터) 라고 하며,
 이러한 Attack Vector 들의 집합을 Attack Surface 라고 한다. 
 
 공격자는 입력창을 통해 프로그램과 상호 작용할 수 있으며, 제목,내용에 공격자의 입력을 넣을 수 있고 업로드 기능을 통해 이를 프로그램에 전달할 수 있습니다.
 이러한 부분은 모두 공격 벡터입니다. 그렇다면 프로그램에서 제목을 처리하는 코드는 안전하고, 내용을 처리하는 코드에서 보안보안 취약점이 발생하며, 업로드 하는 과정에서도 별다른 문제가 없다고 가정해 보겠습니다. 이때 내용을 처리하는 코드는 공격자가 접근해 악용할 수 있기 때문에 보안 취약점이라고 할 수 있습니다. 
 
 그렇다면 이번에는 프로그램의 unreachable code 영역에 심각한 보안 취약점이 있다고 가정하자 
 만약 해당 코드가 어디에서도 사용되지 않고 공격자가 이를 실행할 방법이 없다면 이는 보안 취약점이라고 할 수는 없다. 그러나 이러한 코드도 잠재적으로 악용될 수 있는 코드이기 때문에 좀재해서는 안 된다.
 
 따라서 프로그래머는 사용자에게서 입력받는 부분을 철저히 검증해야 한다. 프로그래머가 사용자의 입력을 받는 부분에서 실수한다면 예상치 못한 버그가 발생할 수 있고, 이 버그 중 일부가 보안 취약점이 되어 공격의 대상이 된다.
 
 4. 취약점의 종류 - 로지컬 버그 
 
 이번에는 로지컬 버그 중 대표적인 몇 가지들을 살펴보도록 하자. 로지컬 버그는 메모리 커럽션 취약점과는 달리 프로그램의 메모리 구조를 이용해 공격할 필요가 없다. 따라서 익스플로잇 작성이 메모리 커럽션 취약점보다는 상대적으로 간단하다.
 
 로지컬 버그
 * Command injection
 * Race Condition
 * Path Traversal 
 * etc 
 
 1. Command injection 
 
 Command Injection은 사용자의 입력을 셸에 전당해 실행할 때 정확한 검사를 실행하지 않아 발생하는 취약점 이다.
 이는 공격자가 원하는 명령을 실행할 수 있는 데 비해 익스플로잇이 어렵지 않아 매우 강력한 취약점 이다.
 
 2. Race Condition 
 
 보안 취약점으로서의 Race Condition은 여러 스레드나 프로세스의 자원 관리를 정확히 수행하지 못해 데이터가 오염되는 취약점이다. 레이스 컨디션은 발생 원인과 공격 방법에 따라 메모리 커럽션 취약점으로도, 로지컬 취약점으로도 분류할 수 있는 취약점이다.
 
 3. Path Traversal 
 
 Path Traversal 은 프로그래머가 가정한 디렉토리를 벗어나 외부에 존재하는 파일에 접근할 수 있는 취약점이다. 이는 주로 소스 코드에서 "../" 와 같은 경로 문자를 검사하지 않아 발생한다.
 
 5. 보호 기법 
 
 초기의 소프트웨어는 이런 악의적 공격에 대한 대책이 전혀 준비되어있지 않아 취약점만 존재한다면 쉽게 공격당했다. 그러나 몇몇 세계적인 해킹 사건들이 발생하면서 '취약점이 없는 프로그램을 개발해야 한다' 라는 공통된 문제의식이 생겨났고 이는 안전한 소프트웨어 개발
 방법론에 대한 연구로 이어졌다. 그러나 아직까지는 완벽히 안전한 개발 방법론이 개발되지 못했고, 근본적으로, 소프트웨어가 안전한지 증명할 방법도 존재하질 않는다.
 
 따라서 컴퓨터 과학자들은 기본적으로 취약점은 존재한다는 전제하에 시스템을 보호하는 방법을 고민했고, 그래서 등장한게 보호기법이다.
 
 보호기법은 취약점을 통한 공격을 어렵게 만든다. 예를 들어, 스택 버퍼 오버플로우에 대한 보호기법 중 하나인 Stack Smashing Protect(SSP)는 버퍼의 뒤에 랜덤한 값을 넣어두고, 이 값은 특정 시점에 검사하여 버퍼 오버플로우가 발생했는지 탐지한다.
 그리고 만약 공격이 발생했다면 프로그램을 강제로 종료시킨다. 이로 인해 공격자는 프로그램에서 버퍼 오버플로우 취약점을 발견해도 공격에 이용하기 어려워 진다.
 
 그러나 해커들 역시 보호기법을 우회하기 위해 여러 새로운 공격기법들을 고안했다. 이렇게 새로 등장한 공격기법을 막기 위해 또 새로운 보호기법이 생기고, 이를 우회하기 위한 또 다른 공격기법들이 만들어 지게 된다.
 공격기법과 보호기법의 공방은 처음 스택 버퍼 오버플로우를 공격하는 문서가 발표된 이후 지금까지 꾸준히 계속되고 있다.
 
 -REVIEW- 
 
 이번 강의에서는 시스템 해킹, 취약점 그리고 취약점의 몇 가지 종류와 미티게이션에 대해 알아보았다. 이후의 Memory Crrupotion -C 강의 부터는 본격적으로 취약점을 코드 수준에서 알아보며 공부할 것이다. 
 
 
