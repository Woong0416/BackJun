C 언어에는 printf 외에도 포맷 스트링을 인자로 사용하는 함수들이 많다. 대표적으로 scanf,fprintf,fscanf,sscanf가 있다. 함수의 이름이 "f(formatted)"로 끝나고, 문자열을 다루는 함수라면 포맷 스트링을 처리할 것으로 추측해볼 수 있다.

- 이 함수들은 포맷 스트링을 채울 값들을 레지스터나 스택에서 가져온다. 
그런데 이들 내부에는 포맷 스트링이 필요로 하는 인자의 개수와 함수에 전달된 인자의 개수를 비교하는 루틴이 없다.
그래서 만약 사용자가 포맷 스트링을 입력할 수 있다면, 악의적으로 다수의 인자를 요청하여 레지스터나 스택의 값을 읽어낼 수 있다.
심지어 다양한 형식지정자를 활용하여 원하는 위치의 스택 값을 읽거나, 스택에 임의 값을 쓰는 것도 가능하다.  

* 스택(stack) 이란 ?
스택 영역엔 함수 호출과 관련된 정보들, 그 중에서도 특히 리턴(return) 어드레스가 저장되기 때문에 중요하다.
스택이란 "데이터 구조"라는 컴퓨터 분야에 나오는 개념으로서, 메모리의 데이터들을 효율적으로 다루기 위해 고안된 데이터 참조 방식 중 하나이다. 
스택이란 쌓여진 것을 의미한다.
데이터를 밑에서부터 차곡차곡 쌓는것에서 착안했다. 
스택의 기본개념은 "처리순서대로 가까룬 속에 둔다" 이다. 
입력순서대로 밑에서부터 쌓아올려진 데이터가 사용할때는 반대로 위에서 부터 사용된다.
스택은 가장 나중에 들어온 자료가 가장 먼저 나가게 되기 때문에 LIFO(Last-In, First-out),
우리말로는 "후입 선출형 구조" 라고 한다.
스택에 새로운 자료를 추가하는 것을 컴퓨터 용어로 PUSH라고 부른다.
PUSH에 의해 스택에 저장된 값을 다시 뺴내어 내는 것은 POP 이라고 한다. 
스택은 기본적으로 PUSH와 POP이라는 두 개의 명령으로만 데이터를 추가하거나 제거할 수 있으며,
이때 PUSH 혹은 POP 되는 데이터의 크기는 스택을 구현하는 프로그래머가 마음대로 정할 수 있다.
OS 에 기본으로 구현되어 있는 스택을 "시스템 스택" 이라고 하는데,
이 시스템 스택의 기본 데이터 크기는 프로그램의 레지스터 크기와 일치한다.
즉, 우리는 현재 32bit 프로그램을 기준으로 하고 있기 때문에 시스템 스택 데이터의 기본 크기는 32비트(4바이트) 가 된다.
TOP이란, 단어 자체에서 나타나는 바대로 현재 스택에 쌓인 데이터들의 위치 중 가장 높은 위치의 메모리 주소 값(즉, 실제로는 가장 낮은 주소 값) 을 가리키는 용어이다. 
TOP의 용도는 스택에 데이터가 추가되거나 제거 될 때에 기준이 되는 위치를 정하는 것이다.
PUSH가 이루어질 때엔 현재 TOP에 해당하는 위치를 기준으로 새로운 데이터가 추가되고, TOP의 위치는 3바이트 만큼 높아진다.
TOP는 스택에서 데이터가 추가되거나 제거되는 위치를 "가리키고" 있기 때문에, Stack Pointer라고 불리기도 한다.
BOTTOM은 스택에서 가장 아랫 부분에 해당하는 메모리 주소 값(즉, 실제로는 가장 높은 주소 값)을 가리킬 때 사용하는 용어이다

여기서 스택의 궁금점을 두 개 해소할 수 있다.
우선 스택은 새로운 데이터를 받을때마다 공유라이브러리 방향으로 데이터가 쌓이기 때문에
영원히 커널을 건드리지 않을 수 있다.
두번째로, 라이브러리를 사이에 두고 새로운 데이터가 추가될수록 높은 메모리 주소를 할당받는
힙영역과 공간을 알뜰하게 사용할 수 있기 때문이다.

- 포멧 스트링 버그 는 포맷 스트링 함수의 잘못된 사용으로 발생하는 버그를 이른다. 
포맷 스트링을 사용자가 입력할 수 있을 때, 공격자는 레지스터와 스택을 읽을 수 있고, 임의 주소 읽기 및 쓰기를 할 수 있다.

 
